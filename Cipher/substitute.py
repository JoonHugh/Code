DEBUG = 0

def make_substitution(ciphertext, guess):
    """
    Parameters:
    -------------------------
    ciphertext: input ciphertext, string
    guess: a dictionary in which key is a letter in the ciphertext and
    the value is the letter in plaintext.
    Return:
    -------------------------
    the output string is generated by replacing all the letters in the
    dictionary with its corresponding plaintext. All the letters which
    do not have corresponding entries in the dictionary are replaced
    with '_' symbol.
    """
    # dictionary for substitution, replacing all chars in alphabet not in guess with _
    substitution_map = {chr(i): '_' for i in range(97, 123)}
    substitution_map.update(guess)  # update map with guessed substitutions

    translation_table = str.maketrans(substitution_map) # create translation table
    
    translated = ciphertext.translate(translation_table) # translate ciphertext using created table

    if DEBUG: print("translated:", translated)
    return translated


with open("ciphertext.txt") as file:
    content = file.read()

# Example usage:
guess = {'v' : 'e', 'g' : 't', 's' : 'h', 'i' : 'r', 'r' : 'i', 'm' : 'n', 'h' : 's', 'x' : 'c', 'f' : 'u', 'y' : 'b', 'l' : 'o', 'k' : 'p', 'z' : 'a', 'b' : 'y', 't' : 'g', 'o' : 'l'}

res = make_substitution(content, guess)
print(res)
